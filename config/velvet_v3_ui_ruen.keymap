#include "keys_ru.h"
#include <dt-bindings/zmk/input_transform.h>
#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        cap_sen: cap_sen {
            compatible = "zmk,behavior-hold-tap";
            label = "CAP_SEN";
            bindings = <&mo>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            hold-while-undecided;
        };
    };

    combos {
        compatible = "zmk,combos";

        cmben {
            bindings = <&layer_en>;
            key-positions = <0 1>;
            layers = <1>;
        };

        cmbru {
            bindings = <&layer_ru>;
            key-positions = <0 1>;
            layers = <0>;
        };

        left_bracket_en {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <4 5>;
            layers = <0>;
        };

        left_bracket_ru {
            bindings = <&en LEFT_BRACKET>;
            key-positions = <5 4>;
            layers = <1>;
        };

        right_bracket_en {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <6 7>;
            layers = <0>;
        };

        right_bracket_ru {
            bindings = <&en RIGHT_BRACKET>;
            key-positions = <6 7>;
            layers = <1>;
        };

        left_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <17 16>;
        };

        right_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <18 19>;
        };

        left_brace_en {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <28 29>;
            layers = <0>;
        };

        left_brace_ru {
            bindings = <&en LEFT_BRACE>;
            key-positions = <28 29>;
            layers = <1>;
        };

        right_brace_en {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <30 31>;
            layers = <0>;
        };

        right_brace_ru {
            bindings = <&en RIGHT_BRACE>;
            key-positions = <30 31>;
            layers = <1>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <3 4>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <7 8>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <15 16>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <19 20>;
        };

        double_quote_en {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <28 27>;
            layers = <0>;
        };

        double_quote_ru {
            bindings = <&en DOUBLE_QUOTES>;
            key-positions = <27 28>;
            layers = <1>;
        };

        single_quote_en {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <31 32>;
            layers = <0>;
        };

        single_quote_ru {
            bindings = <&en SINGLE_QUOTE>;
            key-positions = <31 32>;
        };

        start_line_en {
            bindings = <&kp CARET>;
            key-positions = <2 3>;
            layers = <0>;
        };

        start_line_ru {
            bindings = <&en CARET>;
            key-positions = <3 2>;
            layers = <1>;
        };

        end_line_en {
            bindings = <&kp DOLLAR>;
            key-positions = <8 9>;
            layers = <0>;
        };

        end_line_ru {
            bindings = <&en DOLLAR>;
            key-positions = <8 9>;
            layers = <1>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <36 37>;
        };

        hash_en {
            bindings = <&kp HASH>;
            key-positions = <44 45>;
            layers = <0>;
        };

        hash_ru {
            bindings = <&en HASH>;
            key-positions = <44 45>;
            layers = <1>;
        };

        dog_en {
            bindings = <&kp AT_SIGN>;
            key-positions = <26 27>;
            layers = <0>;
        };

        dog_ru {
            bindings = <&en AT_SIGN>;
            key-positions = <26 27>;
            layers = <1>;
        };

        ampersand_en {
            bindings = <&kp AMPERSAND>;
            key-positions = <32 33>;
            layers = <0>;
        };

        ampersand_ru {
            bindings = <&en AMPERSAND>;
            key-positions = <32 33>;
            layers = <1>;
        };

        backslash_en {
            bindings = <&kp BACKSLASH>;
            key-positions = <14 15>;
            layers = <0>;
        };

        backslash_ru {
            bindings = <&en BACKSLASH>;
            key-positions = <14 15>;
            layers = <1>;
        };

        slash_en {
            bindings = <&kp SLASH>;
            key-positions = <20 21>;
            layers = <0>;
        };

        slash_ru {
            bindings = <&en SLASH>;
            key-positions = <20 21>;
            layers = <1>;
        };

        tilde_en {
            bindings = <&kp TILDE>;
            key-positions = <2 1>;
            layers = <0>;
        };

        tilde_ru {
            bindings = <&en TILDE>;
            key-positions = <1 2>;
            layers = <1>;
        };

        pipe_en {
            bindings = <&kp PIPE>;
            key-positions = <9 10>;
            layers = <0>;
        };

        pipe_ru {
            bindings = <&en PIPE>;
            key-positions = <9 10>;
            layers = <1>;
        };

        number {
            bindings = <&kp RU_NUMERO>;
            key-positions = <14 13>;
        };

        star {
            bindings = <&kp ASTERISK>;
            key-positions = <21 22>;
        };

        apostrophe_en {
            bindings = <&kp APOSTROPHE>;
            key-positions = <10 11>;
            layers = <0>;
        };

        apostrophe_ru {
            bindings = <&en APOSTROPHE>;
            key-positions = <10 11>;
            layers = <1>;
        };
    };

    macros {
        to_ru: to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(N2))>;
            label = "TO_RU";
        };

        to_en: to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(N1))>;
            label = "TO_EN";
        };

        layer_en: layer_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &to_en>;
            label = "LAYER_EN";
        };

        layer_ru: layer_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &to_ru>;
            label = "LAYER_RU";
        };

        en: en {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&to_en &macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_wait_time 10>,
                <&to_ru>,
                <&macro_wait_time 10>;

            label = "EN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        en {
            bindings = <
&kp ESC             &kp Q  &kp W     &kp E      &kp R              &kp T                              &kp Y      &kp U  &kp I      &kp O      &kp P     &kp BSPC
&mt LEFT_SHIFT TAB  &kp A  &kp S     &kp D      &kp F              &kp G                              &kp H      &kp J  &kp K      &kp L      &kp SEMI  &kp GRAVE
&kp LCTRL           &kp Z  &kp X     &kp C      &kp V              &kp B                              &kp N      &kp M  &kp COMMA  &kp DOT    &kp SQT   &kp RSHFT
                           &kp SEMI  &layer_ru  &mt LGUI QUESTION  &lt 2 COMMA  &kp SPACE    &kp RET  &lt 3 DOT  &mo 5  &layer_en  &kp COLON
            >;

            display-name = "en";
        };

        ru {
            display-name = "ru";
            bindings = <
&kp ESC             &kp RU_CYRILLIC_SHORT_I  &kp RU_CYRILLIC_TSE   &kp RU_CYRILLIC_U   &kp RU_CYRILLIC_KA    &kp RU_CYRILLIC_IE                        &kp RU_CYRILLIC_EN  &kp RU_CYRILLIC_GHE        &kp RU_CYRILLIC_SHA  &kp RU_CYRILLIC_SHCHA  &kp RU_CYRILLIC_ZE   &kp BSPC
&mt LEFT_SHIFT TAB  &kp RU_CYRILLIC_EF       &kp RU_CYRILLIC_YERU  &kp RU_CYRILLIC_VE  &kp RU_CYRILLIC_A     &kp RU_CYRILLIC_PE                        &kp RU_CYRILLIC_ER  &kp RU_CYRILLIC_O          &kp RU_CYRILLIC_EL   &kp RU_CYRILLIC_DE     &kp RU_CYRILLIC_ZHE  &kp RU_CYRILLIC_E
&kp LCTRL           &kp RU_CYRILLIC_YA       &kp RU_CYRILLIC_CHE   &kp RU_CYRILLIC_ES  &kp RU_CYRILLIC_EM    &kp RU_CYRILLIC_I                         &kp RU_CYRILLIC_TE  &kp RU_CYRILLIC_SOFT_SIGN  &kp RU_CYRILLIC_BE   &kp RU_CYRILLIC_YU     &kp RU_CYRILLIC_HA   &kp RU_CYRILLIC_HARD_SIGN
                                             &en SEMICOLON         &layer_ru           &mt LGUI RU_QUESTION  &lt 2 RU_COMMA      &kp SPACE    &kp RET  &lt 3 RU_DOT        &mo 5                      &layer_en            &en COLON
            >;
        };

        nav {
            bindings = <
&trans  &trans  &kp HOME  &kp UP              &kp PAGE_UP    &kp PRINTSCREEN                        &kp F13  &kp F14  &kp F15  &kp F16  &kp F17  &kp F18
&trans  &trans  &kp LEFT  &kp DOWN            &kp RIGHT      &kp LC(PRINTSCREEN)                    &trans   &kp F20  &kp F21  &kp F22  &kp F23  &kp LG(P)
&trans  &trans  &kp END   &kp RU_CYRILLIC_IO  &kp PAGE_DOWN  &kp DEL                                &trans   &trans   &trans   &trans   &trans   &trans
                &trans    &kp EXCLAMATION     &trans         &trans               &trans    &trans  &mo 4    &trans   &trans   &trans
            >;

            display-name = "nav";
        };

        sym {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4   &kp F5   &kp F6                     &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &trans
&kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12                    &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &trans
&trans  &trans  &trans  &trans   &trans   &trans                     &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans   &trans   &mo 4    &trans    &trans  &trans  &trans  &trans  &trans
            >;

            display-name = "sym";
        };

        adj {
            bindings = <
&bootloader  &none  &kp F1  &kp F2   &kp F3   &kp F4                   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2      &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&none        &none  &kp F5  &kp F6   &kp F7   &kp F8                   &out OUT_BLE  &kp C_VOL_DN  &kp K_MUTE        &kp C_VOL_UP  &bootloader   &studio_unlock
&none        &none  &kp F9  &kp F10  &kp F11  &kp F12                  &out OUT_USB  &kp K_PREV    &kp K_PLAY_PAUSE  &kp K_NEXT    &none         &none
                    &none   &none    &none    &none    &none    &none  &none         &none         &none             &none
            >;

            display-name = "adj";
        };

        mouse {
            bindings = <
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
&trans  &mo 6   &mkp MB3  &mkp MB2  &mkp MB1  &mo 7                     &mo 7   &mkp MB1  &mkp MB2  &mkp MB3  &mo 6   &trans
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
                &trans    &trans    &trans    &trans  &trans    &trans  &trans  &trans    &trans    &trans
            >;
        };

        scroll {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };

        sniper {
            bindings = <
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
&trans  &trans  &mkp MB3  &mkp MB2  &mkp MB1  &trans                    &trans  &mkp MB1  &mkp MB2  &mkp MB3  &trans  &trans
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
                &trans    &trans    &trans    &trans  &trans    &trans  &trans  &trans    &trans    &trans
            >;
        };
    };
};

&trackball { cpi = <1000>; };

&trackball_listener {
    input-processors = <&zip_xy_scaler 9 20>;

    scroller {
        layers = <7>;
        input-processors =
            <&zip_xy_transform INPUT_TRANSFORM_Y_INVERT>,
            <&zip_xy_scaler 1 32>,
            <&zip_xy_to_scroll_mapper>;
    };

    sniper {
        layers = <8>;
        input-processors = <&zip_xy_scaler 1 4>;
    };
};
